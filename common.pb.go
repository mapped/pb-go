// ******************************************************************************************************
// Copyright 2022 Mapped Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ******************************************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: mapped/common.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthMode int32

const (
	AuthMode_AUTH_MODE_UNSPECIFIED AuthMode = 0
	AuthMode_PAT                   AuthMode = 1
)

// Enum value maps for AuthMode.
var (
	AuthMode_name = map[int32]string{
		0: "AUTH_MODE_UNSPECIFIED",
		1: "PAT",
	}
	AuthMode_value = map[string]int32{
		"AUTH_MODE_UNSPECIFIED": 0,
		"PAT":                   1,
	}
)

func (x AuthMode) Enum() *AuthMode {
	p := new(AuthMode)
	*p = x
	return p
}

func (x AuthMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthMode) Descriptor() protoreflect.EnumDescriptor {
	return file_mapped_common_proto_enumTypes[0].Descriptor()
}

func (AuthMode) Type() protoreflect.EnumType {
	return &file_mapped_common_proto_enumTypes[0]
}

func (x AuthMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthMode.Descriptor instead.
func (AuthMode) EnumDescriptor() ([]byte, []int) {
	return file_mapped_common_proto_rawDescGZIP(), []int{0}
}

var file_mapped_common_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         12345,
		Name:          "mapped.name",
		Tag:           "bytes,12345,opt,name=name",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50000,
		Name:          "mapped.not_pii",
		Tag:           "varint,50000,opt,name=not_pii",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         50001,
		Name:          "mapped.pii_mtl",
		Tag:           "varint,50001,opt,name=pii_mtl",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50100,
		Name:          "mapped.graphql_ignore",
		Tag:           "varint,50100,opt,name=graphql_ignore",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50200,
		Name:          "mapped.graphql_type",
		Tag:           "bytes,50200,opt,name=graphql_type",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50300,
		Name:          "mapped.field_description",
		Tag:           "bytes,50300,opt,name=field_description",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50500,
		Name:          "mapped.hash_contributor",
		Tag:           "varint,50500,opt,name=hash_contributor",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50800,
		Name:          "mapped.graphql_extract_output_path",
		Tag:           "bytes,50800,opt,name=graphql_extract_output_path",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50900,
		Name:          "mapped.is_object_id",
		Tag:           "varint,50900,opt,name=is_object_id",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50100,
		Name:          "mapped.graphql_ignore_message",
		Tag:           "varint,50100,opt,name=graphql_ignore_message",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50101,
		Name:          "mapped.graphql_message_type",
		Tag:           "varint,50101,opt,name=graphql_message_type",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50102,
		Name:          "mapped.graphql_message_type_name",
		Tag:           "bytes,50102,opt,name=graphql_message_type_name",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50300,
		Name:          "mapped.message_description",
		Tag:           "bytes,50300,opt,name=message_description",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50400,
		Name:          "mapped.protect_me",
		Tag:           "varint,50400,opt,name=protect_me",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50000,
		Name:          "mapped.graphql_prefix",
		Tag:           "bytes,50000,opt,name=graphql_prefix",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50300,
		Name:          "mapped.enum_description",
		Tag:           "bytes,50300,opt,name=enum_description",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50400,
		Name:          "mapped.graphql_enum_type",
		Tag:           "varint,50400,opt,name=graphql_enum_type",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50300,
		Name:          "mapped.enum_value_description",
		Tag:           "bytes,50300,opt,name=enum_value_description",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50400,
		Name:          "mapped.graphql_ignore_enum_value",
		Tag:           "varint,50400,opt,name=graphql_ignore_enum_value",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50300,
		Name:          "mapped.service_description",
		Tag:           "bytes,50300,opt,name=service_description",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50300,
		Name:          "mapped.method_description",
		Tag:           "bytes,50300,opt,name=method_description",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: ([]AuthMode)(nil),
		Field:         50303,
		Name:          "mapped.graphql_auth_modes",
		Tag:           "varint,50303,rep,name=graphql_auth_modes,enum=mapped.AuthMode",
		Filename:      "mapped/common.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50300,
		Name:          "mapped.oneof_description",
		Tag:           "bytes,50300,opt,name=oneof_description",
		Filename:      "mapped/common.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional string name = 12345;
	E_Name = &file_mapped_common_proto_extTypes[0]
	// optional string enum_value_description = 50300;
	E_EnumValueDescription = &file_mapped_common_proto_extTypes[17]
	// Marks the enum value as being internal and not intended for customer use
	//
	// optional bool graphql_ignore_enum_value = 50400;
	E_GraphqlIgnoreEnumValue = &file_mapped_common_proto_extTypes[18]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// All fields are assumed PII unless this option is set
	//
	// optional bool not_pii = 50000;
	E_NotPii = &file_mapped_common_proto_extTypes[1]
	// For PII fields, minimum time to live (MTL) in days. Default && minimum == 30
	//
	// optional int32 pii_mtl = 50001;
	E_PiiMtl = &file_mapped_common_proto_extTypes[2]
	// Marks the method as being internal and not intended for customer use
	//
	// optional bool graphql_ignore = 50100;
	E_GraphqlIgnore = &file_mapped_common_proto_extTypes[3]
	// Marks the field type intended for customer use
	//
	// optional string graphql_type = 50200;
	E_GraphqlType = &file_mapped_common_proto_extTypes[4]
	// optional string field_description = 50300;
	E_FieldDescription = &file_mapped_common_proto_extTypes[5]
	// Marks the field as being a contribution to any hash that is to be created for the message
	//
	// optional bool hash_contributor = 50500;
	E_HashContributor = &file_mapped_common_proto_extTypes[6]
	// Marks the field which will return the nested field (described in the path) of the output type in GraphQL.
	// Format -> Each nesting level (complex type) is separated by a dot.
	//
	// message Type1 { string value = 1; }
	// message Type2 { Type1 type1 = 1; }
	// message Type3 { Type2 type2 = 1 [(graphql_extract_output_path) = "type1.value"]}
	//
	// In such case, GraphQL will define the return/output type as string and will return `value` field
	// of Type1 while try to get `type2` field.
	//
	// optional string graphql_extract_output_path = 50800;
	E_GraphqlExtractOutputPath = &file_mapped_common_proto_extTypes[7]
	// optional bool is_object_id = 50900;
	E_IsObjectId = &file_mapped_common_proto_extTypes[8] // indicates if the string field should be interpreted as ObjectId
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// Marks the message as being internal and not intended for customer use
	// If a gRPC method's request or response message is marked as internal,
	// then the gRPC method will not be exposed to customers.
	//
	// optional bool graphql_ignore_message = 50100;
	E_GraphqlIgnoreMessage = &file_mapped_common_proto_extTypes[9]
	// Marks the message as being public and intended for customer use in GraphQL API
	//
	// optional bool graphql_message_type = 50101;
	E_GraphqlMessageType = &file_mapped_common_proto_extTypes[10]
	// Specifies the name of the GraphQL type.
	//
	// optional string graphql_message_type_name = 50102;
	E_GraphqlMessageTypeName = &file_mapped_common_proto_extTypes[11]
	// optional string message_description = 50300;
	E_MessageDescription = &file_mapped_common_proto_extTypes[12]
	// marks the message as one that is in need of protection (i.e. encrypt at rest, etc.)
	//
	// optional bool protect_me = 50400;
	E_ProtectMe = &file_mapped_common_proto_extTypes[13]
)

// Extension fields to descriptorpb.FileOptions.
var (
	// Becomes the type prefix for all GraphQL types derived from file
	//
	// optional string graphql_prefix = 50000;
	E_GraphqlPrefix = &file_mapped_common_proto_extTypes[14]
)

// Extension fields to descriptorpb.EnumOptions.
var (
	// optional string enum_description = 50300;
	E_EnumDescription = &file_mapped_common_proto_extTypes[15]
	// Marks the enum as being public and intended for customer use in GraphQL API
	//
	// optional bool graphql_enum_type = 50400;
	E_GraphqlEnumType = &file_mapped_common_proto_extTypes[16]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional string service_description = 50300;
	E_ServiceDescription = &file_mapped_common_proto_extTypes[19]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional string method_description = 50300;
	E_MethodDescription = &file_mapped_common_proto_extTypes[20]
	// The option determines a list of authorization modes which are supportable while GraphQL -> gRPC service call
	//
	// repeated mapped.AuthMode graphql_auth_modes = 50303;
	E_GraphqlAuthModes = &file_mapped_common_proto_extTypes[21]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// optional string oneof_description = 50300;
	E_OneofDescription = &file_mapped_common_proto_extTypes[22]
)

var File_mapped_common_proto protoreflect.FileDescriptor

var file_mapped_common_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a,
	0x2e, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x55, 0x54, 0x48, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x41, 0x54, 0x10, 0x01, 0x3a,
	0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb9, 0x60, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x38, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x5f, 0x70,
	0x69, 0x69, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x50, 0x69,
	0x69, 0x3a, 0x38, 0x0a, 0x07, 0x70, 0x69, 0x69, 0x5f, 0x6d, 0x74, 0x6c, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x69, 0x69, 0x4d, 0x74, 0x6c, 0x3a, 0x46, 0x0a, 0x0e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb4, 0x87, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x3a, 0x42, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x98, 0x88, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x4c, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfc, 0x88, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x4a, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc4, 0x8a, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x3a, 0x5e, 0x0a, 0x1b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xf0, 0x8c, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x3a, 0x41, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xd4, 0x8d, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x3a, 0x57, 0x0a, 0x16, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xb4, 0x87, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x53, 0x0a,
	0x14, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb5, 0x87, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x5c, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xb6, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x3a, 0x52, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfc, 0x88, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x40, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f,
	0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xe0, 0x89, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x3a, 0x45, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71,
	0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x3a, 0x49, 0x0a,
	0x10, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xfc, 0x88, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x4a, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0x89, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x45, 0x6e, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x59, 0x0a, 0x16, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xfc, 0x88, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x5e, 0x0a, 0x19, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xe0, 0x89, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x52, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfc, 0x88, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x4f, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfc, 0x88, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x60, 0x0a, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xff, 0x88, 0x03, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x41, 0x75, 0x74,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x4c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x6e,
	0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfc, 0x88, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x50, 0x01, 0x5a, 0x16, 0x67, 0x6f, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e,
	0x64, 0x65, 0x76, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x06, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mapped_common_proto_rawDescOnce sync.Once
	file_mapped_common_proto_rawDescData = file_mapped_common_proto_rawDesc
)

func file_mapped_common_proto_rawDescGZIP() []byte {
	file_mapped_common_proto_rawDescOnce.Do(func() {
		file_mapped_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_mapped_common_proto_rawDescData)
	})
	return file_mapped_common_proto_rawDescData
}

var file_mapped_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mapped_common_proto_goTypes = []interface{}{
	(AuthMode)(0),                         // 0: mapped.AuthMode
	(*descriptorpb.EnumValueOptions)(nil), // 1: google.protobuf.EnumValueOptions
	(*descriptorpb.FieldOptions)(nil),     // 2: google.protobuf.FieldOptions
	(*descriptorpb.MessageOptions)(nil),   // 3: google.protobuf.MessageOptions
	(*descriptorpb.FileOptions)(nil),      // 4: google.protobuf.FileOptions
	(*descriptorpb.EnumOptions)(nil),      // 5: google.protobuf.EnumOptions
	(*descriptorpb.ServiceOptions)(nil),   // 6: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),    // 7: google.protobuf.MethodOptions
	(*descriptorpb.OneofOptions)(nil),     // 8: google.protobuf.OneofOptions
}
var file_mapped_common_proto_depIdxs = []int32{
	1,  // 0: mapped.name:extendee -> google.protobuf.EnumValueOptions
	2,  // 1: mapped.not_pii:extendee -> google.protobuf.FieldOptions
	2,  // 2: mapped.pii_mtl:extendee -> google.protobuf.FieldOptions
	2,  // 3: mapped.graphql_ignore:extendee -> google.protobuf.FieldOptions
	2,  // 4: mapped.graphql_type:extendee -> google.protobuf.FieldOptions
	2,  // 5: mapped.field_description:extendee -> google.protobuf.FieldOptions
	2,  // 6: mapped.hash_contributor:extendee -> google.protobuf.FieldOptions
	2,  // 7: mapped.graphql_extract_output_path:extendee -> google.protobuf.FieldOptions
	2,  // 8: mapped.is_object_id:extendee -> google.protobuf.FieldOptions
	3,  // 9: mapped.graphql_ignore_message:extendee -> google.protobuf.MessageOptions
	3,  // 10: mapped.graphql_message_type:extendee -> google.protobuf.MessageOptions
	3,  // 11: mapped.graphql_message_type_name:extendee -> google.protobuf.MessageOptions
	3,  // 12: mapped.message_description:extendee -> google.protobuf.MessageOptions
	3,  // 13: mapped.protect_me:extendee -> google.protobuf.MessageOptions
	4,  // 14: mapped.graphql_prefix:extendee -> google.protobuf.FileOptions
	5,  // 15: mapped.enum_description:extendee -> google.protobuf.EnumOptions
	5,  // 16: mapped.graphql_enum_type:extendee -> google.protobuf.EnumOptions
	1,  // 17: mapped.enum_value_description:extendee -> google.protobuf.EnumValueOptions
	1,  // 18: mapped.graphql_ignore_enum_value:extendee -> google.protobuf.EnumValueOptions
	6,  // 19: mapped.service_description:extendee -> google.protobuf.ServiceOptions
	7,  // 20: mapped.method_description:extendee -> google.protobuf.MethodOptions
	7,  // 21: mapped.graphql_auth_modes:extendee -> google.protobuf.MethodOptions
	8,  // 22: mapped.oneof_description:extendee -> google.protobuf.OneofOptions
	0,  // 23: mapped.graphql_auth_modes:type_name -> mapped.AuthMode
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	23, // [23:24] is the sub-list for extension type_name
	0,  // [0:23] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_mapped_common_proto_init() }
func file_mapped_common_proto_init() {
	if File_mapped_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mapped_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 23,
			NumServices:   0,
		},
		GoTypes:           file_mapped_common_proto_goTypes,
		DependencyIndexes: file_mapped_common_proto_depIdxs,
		EnumInfos:         file_mapped_common_proto_enumTypes,
		ExtensionInfos:    file_mapped_common_proto_extTypes,
	}.Build()
	File_mapped_common_proto = out.File
	file_mapped_common_proto_rawDesc = nil
	file_mapped_common_proto_goTypes = nil
	file_mapped_common_proto_depIdxs = nil
}
