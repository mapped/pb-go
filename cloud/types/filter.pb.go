// ******************************************************************************************************
// Copyright 2022 Mapped Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ******************************************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: mapped/cloud/types/filter.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operator int32

const (
	Operator_OPERATOR_UNSPECIFIED Operator = 0
	// Existance
	Operator_OP_EXISTS Operator = 1 // bool value (true=exists, false=does not exist)
	// Numeric expressions
	Operator_OP_EQ            Operator = 10 // ==
	Operator_OP_NE            Operator = 11 // !=
	Operator_OP_GT            Operator = 12 // >
	Operator_OP_GTE           Operator = 13 // >=
	Operator_OP_LT            Operator = 14 // <
	Operator_OP_LTE           Operator = 15 // <=
	Operator_OP_EQ_ELEM_MATCH Operator = 16 // Matches if the stored array field contains an element that matches the provided query value (used for arrays of objects)
	Operator_OP_NE_ELEM_MATCH Operator = 17 // Matches if the stored array field does not contain an element that matches the provided query value (used for arrays of objects)
	// String expressions
	Operator_OP_EQUALS                    Operator = 20
	Operator_OP_CONTAINS                  Operator = 21
	Operator_OP_REGEX                     Operator = 22 // Regex - regex in query value provided used on stored field (/pattern/{opts} or 'pattern' format)
	Operator_OP_INVREGEX                  Operator = 23 // Inverted regex - regex in stored field used on query value provided
	Operator_OP_EQUALS_CASE_INSENSITIVE   Operator = 24 // Case insensitive equals
	Operator_OP_CONTAINS_CASE_INSENSITIVE Operator = 25 // Case insensitive contains
	// Array expressions
	Operator_OP_SIZE Operator = 31 // Matches if the stored array field is the size specified in the query value
	Operator_OP_ALL  Operator = 32 // Matches stored arrays that contain all elements specified in the query value array
	Operator_OP_IN   Operator = 33 // Check if a stored scalar field is ANY of the values in the provided query value array
	Operator_OP_NIN  Operator = 34 // Check if a stored scalar field is NONE of the values in the provided query value array
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0:  "OPERATOR_UNSPECIFIED",
		1:  "OP_EXISTS",
		10: "OP_EQ",
		11: "OP_NE",
		12: "OP_GT",
		13: "OP_GTE",
		14: "OP_LT",
		15: "OP_LTE",
		16: "OP_EQ_ELEM_MATCH",
		17: "OP_NE_ELEM_MATCH",
		20: "OP_EQUALS",
		21: "OP_CONTAINS",
		22: "OP_REGEX",
		23: "OP_INVREGEX",
		24: "OP_EQUALS_CASE_INSENSITIVE",
		25: "OP_CONTAINS_CASE_INSENSITIVE",
		31: "OP_SIZE",
		32: "OP_ALL",
		33: "OP_IN",
		34: "OP_NIN",
	}
	Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED":         0,
		"OP_EXISTS":                    1,
		"OP_EQ":                        10,
		"OP_NE":                        11,
		"OP_GT":                        12,
		"OP_GTE":                       13,
		"OP_LT":                        14,
		"OP_LTE":                       15,
		"OP_EQ_ELEM_MATCH":             16,
		"OP_NE_ELEM_MATCH":             17,
		"OP_EQUALS":                    20,
		"OP_CONTAINS":                  21,
		"OP_REGEX":                     22,
		"OP_INVREGEX":                  23,
		"OP_EQUALS_CASE_INSENSITIVE":   24,
		"OP_CONTAINS_CASE_INSENSITIVE": 25,
		"OP_SIZE":                      31,
		"OP_ALL":                       32,
		"OP_IN":                        33,
		"OP_NIN":                       34,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_mapped_cloud_types_filter_proto_enumTypes[0].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_mapped_cloud_types_filter_proto_enumTypes[0]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{0}
}

// FilterExpressions
type IDFilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq string   `protobuf:"bytes,1,opt,name=eq,proto3" json:"eq,omitempty"`
	In []string `protobuf:"bytes,2,rep,name=in,proto3" json:"in,omitempty"`
}

func (x *IDFilterExpression) Reset() {
	*x = IDFilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDFilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDFilterExpression) ProtoMessage() {}

func (x *IDFilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDFilterExpression.ProtoReflect.Descriptor instead.
func (*IDFilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{0}
}

func (x *IDFilterExpression) GetEq() string {
	if x != nil {
		return x.Eq
	}
	return ""
}

func (x *IDFilterExpression) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

type StringFilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq                      string   `protobuf:"bytes,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Contains                string   `protobuf:"bytes,2,opt,name=contains,proto3" json:"contains,omitempty"`
	In                      []string `protobuf:"bytes,3,rep,name=in,proto3" json:"in,omitempty"`
	Ne                      string   `protobuf:"bytes,4,opt,name=ne,proto3" json:"ne,omitempty"`
	Re                      string   `protobuf:"bytes,5,opt,name=re,proto3" json:"re,omitempty"`
	EqCaseInsensitive       string   `protobuf:"bytes,6,opt,name=eq_case_insensitive,json=eqCaseInsensitive,proto3" json:"eq_case_insensitive,omitempty"`
	ContainsCaseInsensitive string   `protobuf:"bytes,7,opt,name=contains_case_insensitive,json=containsCaseInsensitive,proto3" json:"contains_case_insensitive,omitempty"`
}

func (x *StringFilterExpression) Reset() {
	*x = StringFilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFilterExpression) ProtoMessage() {}

func (x *StringFilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFilterExpression.ProtoReflect.Descriptor instead.
func (*StringFilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{1}
}

func (x *StringFilterExpression) GetEq() string {
	if x != nil {
		return x.Eq
	}
	return ""
}

func (x *StringFilterExpression) GetContains() string {
	if x != nil {
		return x.Contains
	}
	return ""
}

func (x *StringFilterExpression) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *StringFilterExpression) GetNe() string {
	if x != nil {
		return x.Ne
	}
	return ""
}

func (x *StringFilterExpression) GetRe() string {
	if x != nil {
		return x.Re
	}
	return ""
}

func (x *StringFilterExpression) GetEqCaseInsensitive() string {
	if x != nil {
		return x.EqCaseInsensitive
	}
	return ""
}

func (x *StringFilterExpression) GetContainsCaseInsensitive() string {
	if x != nil {
		return x.ContainsCaseInsensitive
	}
	return ""
}

type StringMapStringFilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string                  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *StringFilterExpression `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// AST
	And []*StringMapStringFilterExpression `protobuf:"bytes,100,rep,name=and,proto3" json:"and,omitempty"`
	Or  []*StringMapStringFilterExpression `protobuf:"bytes,101,rep,name=or,proto3" json:"or,omitempty"`
	Not []*StringMapStringFilterExpression `protobuf:"bytes,102,rep,name=not,proto3" json:"not,omitempty"`
}

func (x *StringMapStringFilterExpression) Reset() {
	*x = StringMapStringFilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMapStringFilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMapStringFilterExpression) ProtoMessage() {}

func (x *StringMapStringFilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMapStringFilterExpression.ProtoReflect.Descriptor instead.
func (*StringMapStringFilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{2}
}

func (x *StringMapStringFilterExpression) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StringMapStringFilterExpression) GetValue() *StringFilterExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StringMapStringFilterExpression) GetAnd() []*StringMapStringFilterExpression {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *StringMapStringFilterExpression) GetOr() []*StringMapStringFilterExpression {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *StringMapStringFilterExpression) GetNot() []*StringMapStringFilterExpression {
	if x != nil {
		return x.Not
	}
	return nil
}

type StringMapInt64FilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Int64FilterExpression `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // TODO: Should this be eq instead?
	// AST
	And []*StringMapInt64FilterExpression `protobuf:"bytes,100,rep,name=and,proto3" json:"and,omitempty"`
	Or  []*StringMapInt64FilterExpression `protobuf:"bytes,101,rep,name=or,proto3" json:"or,omitempty"`
	Not []*StringMapInt64FilterExpression `protobuf:"bytes,102,rep,name=not,proto3" json:"not,omitempty"`
}

func (x *StringMapInt64FilterExpression) Reset() {
	*x = StringMapInt64FilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringMapInt64FilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringMapInt64FilterExpression) ProtoMessage() {}

func (x *StringMapInt64FilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringMapInt64FilterExpression.ProtoReflect.Descriptor instead.
func (*StringMapInt64FilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{3}
}

func (x *StringMapInt64FilterExpression) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StringMapInt64FilterExpression) GetValue() *Int64FilterExpression {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StringMapInt64FilterExpression) GetAnd() []*StringMapInt64FilterExpression {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *StringMapInt64FilterExpression) GetOr() []*StringMapInt64FilterExpression {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *StringMapInt64FilterExpression) GetNot() []*StringMapInt64FilterExpression {
	if x != nil {
		return x.Not
	}
	return nil
}

type BoolFilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq        bool `protobuf:"varint,1,opt,name=eq,proto3" json:"eq,omitempty"`
	IsDefined bool `protobuf:"varint,10,opt,name=is_defined,json=isDefined,proto3" json:"is_defined,omitempty"` // This is to distinguish explicitly defined value from its default value. The filter is not effective unless _is_defined == true
}

func (x *BoolFilterExpression) Reset() {
	*x = BoolFilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolFilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolFilterExpression) ProtoMessage() {}

func (x *BoolFilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolFilterExpression.ProtoReflect.Descriptor instead.
func (*BoolFilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{4}
}

func (x *BoolFilterExpression) GetEq() bool {
	if x != nil {
		return x.Eq
	}
	return false
}

func (x *BoolFilterExpression) GetIsDefined() bool {
	if x != nil {
		return x.IsDefined
	}
	return false
}

type FloatFilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  float32   `protobuf:"fixed32,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Gt  float32   `protobuf:"fixed32,2,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte float32   `protobuf:"fixed32,3,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt  float32   `protobuf:"fixed32,4,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte float32   `protobuf:"fixed32,5,opt,name=lte,proto3" json:"lte,omitempty"`
	In  []float32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
}

func (x *FloatFilterExpression) Reset() {
	*x = FloatFilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatFilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatFilterExpression) ProtoMessage() {}

func (x *FloatFilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatFilterExpression.ProtoReflect.Descriptor instead.
func (*FloatFilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{5}
}

func (x *FloatFilterExpression) GetEq() float32 {
	if x != nil {
		return x.Eq
	}
	return 0
}

func (x *FloatFilterExpression) GetGt() float32 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *FloatFilterExpression) GetGte() float32 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *FloatFilterExpression) GetLt() float32 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *FloatFilterExpression) GetLte() float32 {
	if x != nil {
		return x.Lte
	}
	return 0
}

func (x *FloatFilterExpression) GetIn() []float32 {
	if x != nil {
		return x.In
	}
	return nil
}

type Int32FilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  int32   `protobuf:"varint,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Gt  int32   `protobuf:"varint,2,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte int32   `protobuf:"varint,3,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt  int32   `protobuf:"varint,4,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte int32   `protobuf:"varint,5,opt,name=lte,proto3" json:"lte,omitempty"`
	In  []int32 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
}

func (x *Int32FilterExpression) Reset() {
	*x = Int32FilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32FilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32FilterExpression) ProtoMessage() {}

func (x *Int32FilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32FilterExpression.ProtoReflect.Descriptor instead.
func (*Int32FilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{6}
}

func (x *Int32FilterExpression) GetEq() int32 {
	if x != nil {
		return x.Eq
	}
	return 0
}

func (x *Int32FilterExpression) GetGt() int32 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *Int32FilterExpression) GetGte() int32 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *Int32FilterExpression) GetLt() int32 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *Int32FilterExpression) GetLte() int32 {
	if x != nil {
		return x.Lte
	}
	return 0
}

func (x *Int32FilterExpression) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

type Int64FilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  int64   `protobuf:"varint,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Gt  int64   `protobuf:"varint,2,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte int64   `protobuf:"varint,3,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt  int64   `protobuf:"varint,4,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte int64   `protobuf:"varint,5,opt,name=lte,proto3" json:"lte,omitempty"`
	In  []int64 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
}

func (x *Int64FilterExpression) Reset() {
	*x = Int64FilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64FilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64FilterExpression) ProtoMessage() {}

func (x *Int64FilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64FilterExpression.ProtoReflect.Descriptor instead.
func (*Int64FilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{7}
}

func (x *Int64FilterExpression) GetEq() int64 {
	if x != nil {
		return x.Eq
	}
	return 0
}

func (x *Int64FilterExpression) GetGt() int64 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *Int64FilterExpression) GetGte() int64 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *Int64FilterExpression) GetLt() int64 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *Int64FilterExpression) GetLte() int64 {
	if x != nil {
		return x.Lte
	}
	return 0
}

func (x *Int64FilterExpression) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

type UInt32FilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  uint32   `protobuf:"varint,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Gt  uint32   `protobuf:"varint,2,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte uint32   `protobuf:"varint,3,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt  uint32   `protobuf:"varint,4,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte uint32   `protobuf:"varint,5,opt,name=lte,proto3" json:"lte,omitempty"`
	In  []uint32 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
}

func (x *UInt32FilterExpression) Reset() {
	*x = UInt32FilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt32FilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32FilterExpression) ProtoMessage() {}

func (x *UInt32FilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32FilterExpression.ProtoReflect.Descriptor instead.
func (*UInt32FilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{8}
}

func (x *UInt32FilterExpression) GetEq() uint32 {
	if x != nil {
		return x.Eq
	}
	return 0
}

func (x *UInt32FilterExpression) GetGt() uint32 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *UInt32FilterExpression) GetGte() uint32 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *UInt32FilterExpression) GetLt() uint32 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *UInt32FilterExpression) GetLte() uint32 {
	if x != nil {
		return x.Lte
	}
	return 0
}

func (x *UInt32FilterExpression) GetIn() []uint32 {
	if x != nil {
		return x.In
	}
	return nil
}

type UInt64FilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  uint64   `protobuf:"varint,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Gt  uint64   `protobuf:"varint,2,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte uint64   `protobuf:"varint,3,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt  uint64   `protobuf:"varint,4,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte uint64   `protobuf:"varint,5,opt,name=lte,proto3" json:"lte,omitempty"`
	In  []uint64 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
}

func (x *UInt64FilterExpression) Reset() {
	*x = UInt64FilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UInt64FilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64FilterExpression) ProtoMessage() {}

func (x *UInt64FilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64FilterExpression.ProtoReflect.Descriptor instead.
func (*UInt64FilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{9}
}

func (x *UInt64FilterExpression) GetEq() uint64 {
	if x != nil {
		return x.Eq
	}
	return 0
}

func (x *UInt64FilterExpression) GetGt() uint64 {
	if x != nil {
		return x.Gt
	}
	return 0
}

func (x *UInt64FilterExpression) GetGte() uint64 {
	if x != nil {
		return x.Gte
	}
	return 0
}

func (x *UInt64FilterExpression) GetLt() uint64 {
	if x != nil {
		return x.Lt
	}
	return 0
}

func (x *UInt64FilterExpression) GetLte() uint64 {
	if x != nil {
		return x.Lte
	}
	return 0
}

func (x *UInt64FilterExpression) GetIn() []uint64 {
	if x != nil {
		return x.In
	}
	return nil
}

type StringArrayFilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  string   `protobuf:"bytes,1,opt,name=eq,proto3" json:"eq,omitempty"`
	In  []string `protobuf:"bytes,2,rep,name=in,proto3" json:"in,omitempty"`
	Ne  string   `protobuf:"bytes,3,opt,name=ne,proto3" json:"ne,omitempty"`
	Nin []string `protobuf:"bytes,4,rep,name=nin,proto3" json:"nin,omitempty"`
}

func (x *StringArrayFilterExpression) Reset() {
	*x = StringArrayFilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringArrayFilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringArrayFilterExpression) ProtoMessage() {}

func (x *StringArrayFilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringArrayFilterExpression.ProtoReflect.Descriptor instead.
func (*StringArrayFilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{10}
}

func (x *StringArrayFilterExpression) GetEq() string {
	if x != nil {
		return x.Eq
	}
	return ""
}

func (x *StringArrayFilterExpression) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *StringArrayFilterExpression) GetNe() string {
	if x != nil {
		return x.Ne
	}
	return ""
}

func (x *StringArrayFilterExpression) GetNin() []string {
	if x != nil {
		return x.Nin
	}
	return nil
}

type TimestampFilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=eq,proto3" json:"eq,omitempty"`
	Gt  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=gt,proto3" json:"gt,omitempty"`
	Gte *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=gte,proto3" json:"gte,omitempty"`
	Lt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lt,proto3" json:"lt,omitempty"`
	Lte *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lte,proto3" json:"lte,omitempty"`
}

func (x *TimestampFilterExpression) Reset() {
	*x = TimestampFilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampFilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampFilterExpression) ProtoMessage() {}

func (x *TimestampFilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampFilterExpression.ProtoReflect.Descriptor instead.
func (*TimestampFilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{11}
}

func (x *TimestampFilterExpression) GetEq() *timestamppb.Timestamp {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *TimestampFilterExpression) GetGt() *timestamppb.Timestamp {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TimestampFilterExpression) GetGte() *timestamppb.Timestamp {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TimestampFilterExpression) GetLt() *timestamppb.Timestamp {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *TimestampFilterExpression) GetLte() *timestamppb.Timestamp {
	if x != nil {
		return x.Lte
	}
	return nil
}

type TimestampRangeFilterExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gte *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=gte,proto3" json:"gte,omitempty"`
	Lte *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lte,proto3" json:"lte,omitempty"`
}

func (x *TimestampRangeFilterExpression) Reset() {
	*x = TimestampRangeFilterExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampRangeFilterExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampRangeFilterExpression) ProtoMessage() {}

func (x *TimestampRangeFilterExpression) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampRangeFilterExpression.ProtoReflect.Descriptor instead.
func (*TimestampRangeFilterExpression) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{12}
}

func (x *TimestampRangeFilterExpression) GetGte() *timestamppb.Timestamp {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TimestampRangeFilterExpression) GetLte() *timestamppb.Timestamp {
	if x != nil {
		return x.Lte
	}
	return nil
}

// DEPRECATED: Stop using this. Switch to the new filter format...
//
// Deprecated: Marked as deprecated in mapped/cloud/types/filter.proto.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldOps map[string]*OpValue `protobuf:"bytes,1,rep,name=field_ops,json=fieldOps,proto3" json:"field_ops,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	And      []*Filter           `protobuf:"bytes,10,rep,name=and,proto3" json:"and,omitempty"`
	Or       []*Filter           `protobuf:"bytes,11,rep,name=or,proto3" json:"or,omitempty"`
	Not      []*Filter           `protobuf:"bytes,12,rep,name=not,proto3" json:"not,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{13}
}

func (x *Filter) GetFieldOps() map[string]*OpValue {
	if x != nil {
		return x.FieldOps
	}
	return nil
}

func (x *Filter) GetAnd() []*Filter {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *Filter) GetOr() []*Filter {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *Filter) GetNot() []*Filter {
	if x != nil {
		return x.Not
	}
	return nil
}

type OpValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    Operator    `protobuf:"varint,1,opt,name=op,proto3,enum=mapped.cloud.types.Operator" json:"op,omitempty"`
	Value *TypedValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OpValue) Reset() {
	*x = OpValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_filter_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpValue) ProtoMessage() {}

func (x *OpValue) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_filter_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpValue.ProtoReflect.Descriptor instead.
func (*OpValue) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_filter_proto_rawDescGZIP(), []int{14}
}

func (x *OpValue) GetOp() Operator {
	if x != nil {
		return x.Op
	}
	return Operator_OPERATOR_UNSPECIFIED
}

func (x *OpValue) GetValue() *TypedValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var file_mapped_cloud_types_filter_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         75000,
		Name:          "mapped.cloud.types.filter_path",
		Tag:           "bytes,75000,opt,name=filter_path",
		Filename:      "mapped/cloud/types/filter.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*Operator)(nil),
		Field:         75001,
		Name:          "mapped.cloud.types.op",
		Tag:           "varint,75001,opt,name=op,enum=mapped.cloud.types.Operator",
		Filename:      "mapped/cloud/types/filter.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         75000,
		Name:          "mapped.cloud.types.nested_filter",
		Tag:           "varint,75000,opt,name=nested_filter",
		Filename:      "mapped/cloud/types/filter.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         75100,
		Name:          "mapped.cloud.types.filter_expression",
		Tag:           "varint,75100,opt,name=filter_expression",
		Filename:      "mapped/cloud/types/filter.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         75101,
		Name:          "mapped.cloud.types.allow_multi",
		Tag:           "varint,75101,opt,name=allow_multi",
		Filename:      "mapped/cloud/types/filter.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         75102,
		Name:          "mapped.cloud.types.filter_elem_match",
		Tag:           "varint,75102,opt,name=filter_elem_match",
		Filename:      "mapped/cloud/types/filter.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// For Filters, this allows a json dot separated path to be specified for the field
	// location in MongoDB or other document stores. It is optional, and only needed if
	// the filter.value.xyz field being referenced is nested in the document store.
	//
	// For example:
	// ```
	// string person_name = 1 [(filter_path) = "my.value.person_name"];
	// ```
	// Note that "person_name" at the end of that path is in Protobuf snake_case, not
	// JSON lowerCamelCase. GTM will give it the proper casing when generating BSON.
	//
	// optional string filter_path = 75000;
	E_FilterPath = &file_mapped_cloud_types_filter_proto_extTypes[0]
	// For FilterExpressions, this is the operation to be used in the creation of BSON
	//
	// optional mapped.cloud.types.Operator op = 75001;
	E_Op = &file_mapped_cloud_types_filter_proto_extTypes[1]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// Indicates this message is a nested Filter for a custom type (see notes at the top)
	//
	// optional bool nested_filter = 75000;
	E_NestedFilter = &file_mapped_cloud_types_filter_proto_extTypes[2]
	// Indicates this message is a FilterExpression
	//
	// optional bool filter_expression = 75100;
	E_FilterExpression = &file_mapped_cloud_types_filter_proto_extTypes[3]
	// For FilterExpressions, allows multiple values to be set which will be AND'd together
	// default is false
	//
	// optional bool allow_multi = 75101;
	E_AllowMulti = &file_mapped_cloud_types_filter_proto_extTypes[4]
	// Indicates this message's fields should be translated into an $elemMatch query.
	//
	// optional bool filter_elem_match = 75102;
	E_FilterElemMatch = &file_mapped_cloud_types_filter_proto_extTypes[5]
)

var File_mapped_cloud_types_filter_proto protoreflect.FileDescriptor

var file_mapped_cloud_types_filter_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46,
	0x0a, 0x12, 0x49, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0a, 0x52, 0x02, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x21, 0x52, 0x02, 0x69, 0x6e,
	0x3a, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x22, 0x90, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8,
	0xcf, 0x24, 0x0a, 0x52, 0x02, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x15, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x21, 0x52, 0x02, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24,
	0x0b, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x16, 0x52, 0x02, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x13, 0x65,
	0x71, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x18, 0x52, 0x11,
	0x65, 0x71, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x40, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x19, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x43, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x3a, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x22, 0xc8, 0x02, 0x0a, 0x1f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x45, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x65,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x45, 0x0a,
	0x03, 0x6e, 0x6f, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x03, 0x6e, 0x6f, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x03, 0x61, 0x6e,
	0x64, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x6e, 0x64,
	0x12, 0x42, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x02, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x22, 0x51, 0x0a, 0x14, 0x42, 0x6f,
	0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0xc8, 0xcf, 0x24, 0x0a, 0x52, 0x02, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x3a, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x22, 0xa9, 0x01,
	0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0a, 0x52, 0x02, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0c, 0x52,
	0x02, 0x67, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0d, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0e, 0x52, 0x02, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04,
	0xc8, 0xcf, 0x24, 0x0f, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x02, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x21, 0x52, 0x02, 0x69, 0x6e, 0x3a,
	0x08, 0xe0, 0xd5, 0x24, 0x01, 0xe8, 0xd5, 0x24, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x04, 0xc8, 0xcf, 0x24, 0x0a, 0x52, 0x02, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x02, 0x67, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0c, 0x52, 0x02, 0x67, 0x74, 0x12,
	0x16, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xc8, 0xcf,
	0x24, 0x0d, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0e, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0f,
	0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x05, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x21, 0x52, 0x02, 0x69, 0x6e, 0x3a, 0x08, 0xe0, 0xd5, 0x24,
	0x01, 0xe8, 0xd5, 0x24, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xc8, 0xcf, 0x24,
	0x0a, 0x52, 0x02, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0c, 0x52, 0x02, 0x67, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x67,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0d, 0x52, 0x03,
	0x67, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x04, 0xc8, 0xcf, 0x24, 0x0e, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6c, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0f, 0x52, 0x03, 0x6c, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x42, 0x04, 0xc8,
	0xcf, 0x24, 0x21, 0x52, 0x02, 0x69, 0x6e, 0x3a, 0x08, 0xe0, 0xd5, 0x24, 0x01, 0xe8, 0xd5, 0x24,
	0x01, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x02,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0a, 0x52, 0x02,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0xc8, 0xcf, 0x24, 0x0c, 0x52, 0x02, 0x67, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0d, 0x52, 0x03, 0x67, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xcf,
	0x24, 0x0e, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0f, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x02, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x21,
	0x52, 0x02, 0x69, 0x6e, 0x3a, 0x08, 0xe0, 0xd5, 0x24, 0x01, 0xe8, 0xd5, 0x24, 0x01, 0x22, 0xaa,
	0x01, 0x0a, 0x16, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x02, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0a, 0x52, 0x02, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xc8, 0xcf, 0x24,
	0x0c, 0x52, 0x02, 0x67, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0d, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0e, 0x52,
	0x02, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0f, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x21, 0x52, 0x02, 0x69,
	0x6e, 0x3a, 0x08, 0xe0, 0xd5, 0x24, 0x01, 0xe8, 0xd5, 0x24, 0x01, 0x22, 0x7d, 0x0a, 0x1b, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x02, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0a, 0x52, 0x02, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf,
	0x24, 0x21, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0b, 0x52, 0x02, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x03,
	0x6e, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x22, 0x52,
	0x03, 0x6e, 0x69, 0x6e, 0x3a, 0x04, 0xe0, 0xd5, 0x24, 0x01, 0x22, 0xa3, 0x02, 0x0a, 0x19, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0a, 0x52, 0x02, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0c, 0x52, 0x02, 0x67, 0x74, 0x12, 0x32, 0x0a, 0x03,
	0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0d, 0x52, 0x03, 0x67, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0e, 0x52, 0x02,
	0x6c, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xc8, 0xcf, 0x24,
	0x0f, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x3a, 0x08, 0xe0, 0xd5, 0x24, 0x01, 0xe8, 0xd5, 0x24, 0x01,
	0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xc8, 0xcf,
	0x24, 0x0d, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x04, 0xc8, 0xcf, 0x24, 0x0f, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x3a, 0x04, 0xe0, 0xd5, 0x24,
	0x01, 0x22, 0xb5, 0x02, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x61, 0x6e,
	0x64, 0x12, 0x2a, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x2c, 0x0a,
	0x03, 0x6e, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x1a, 0x58, 0x0a, 0x0d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x02, 0x18, 0x01, 0x22, 0x6d, 0x0a, 0x07, 0x4f, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02,
	0x6f, 0x70, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0xd4, 0x02, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f,
	0x4e, 0x45, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x47, 0x54, 0x10, 0x0c, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x47, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x50, 0x5f, 0x4c, 0x54, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4c, 0x54, 0x45,
	0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x50, 0x5f, 0x4e,
	0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x11, 0x12, 0x0d,
	0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x14, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x15, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x17, 0x12, 0x1e, 0x0a,
	0x1a, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f,
	0x49, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x18, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x43, 0x41, 0x53,
	0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x19, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x20, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x5f, 0x49,
	0x4e, 0x10, 0x21, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x5f, 0x4e, 0x49, 0x4e, 0x10, 0x22, 0x3a,
	0x40, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf8, 0xc9,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x3a, 0x4d, 0x0a, 0x02, 0x6f, 0x70, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf9, 0xc9, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70,
	0x3a, 0x46, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xf8, 0xc9, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x4e, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xdc,
	0xca, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x42, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xdd, 0xca, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x3a, 0x4d, 0x0a, 0x11,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xde, 0xca, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x56, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x50, 0x01, 0x5a, 0x22, 0x67, 0x6f, 0x2e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0xf8, 0x01, 0x01, 0xaa, 0x02,
	0x12, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mapped_cloud_types_filter_proto_rawDescOnce sync.Once
	file_mapped_cloud_types_filter_proto_rawDescData = file_mapped_cloud_types_filter_proto_rawDesc
)

func file_mapped_cloud_types_filter_proto_rawDescGZIP() []byte {
	file_mapped_cloud_types_filter_proto_rawDescOnce.Do(func() {
		file_mapped_cloud_types_filter_proto_rawDescData = protoimpl.X.CompressGZIP(file_mapped_cloud_types_filter_proto_rawDescData)
	})
	return file_mapped_cloud_types_filter_proto_rawDescData
}

var file_mapped_cloud_types_filter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mapped_cloud_types_filter_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_mapped_cloud_types_filter_proto_goTypes = []interface{}{
	(Operator)(0),                           // 0: mapped.cloud.types.Operator
	(*IDFilterExpression)(nil),              // 1: mapped.cloud.types.IDFilterExpression
	(*StringFilterExpression)(nil),          // 2: mapped.cloud.types.StringFilterExpression
	(*StringMapStringFilterExpression)(nil), // 3: mapped.cloud.types.StringMapStringFilterExpression
	(*StringMapInt64FilterExpression)(nil),  // 4: mapped.cloud.types.StringMapInt64FilterExpression
	(*BoolFilterExpression)(nil),            // 5: mapped.cloud.types.BoolFilterExpression
	(*FloatFilterExpression)(nil),           // 6: mapped.cloud.types.FloatFilterExpression
	(*Int32FilterExpression)(nil),           // 7: mapped.cloud.types.Int32FilterExpression
	(*Int64FilterExpression)(nil),           // 8: mapped.cloud.types.Int64FilterExpression
	(*UInt32FilterExpression)(nil),          // 9: mapped.cloud.types.UInt32FilterExpression
	(*UInt64FilterExpression)(nil),          // 10: mapped.cloud.types.UInt64FilterExpression
	(*StringArrayFilterExpression)(nil),     // 11: mapped.cloud.types.StringArrayFilterExpression
	(*TimestampFilterExpression)(nil),       // 12: mapped.cloud.types.TimestampFilterExpression
	(*TimestampRangeFilterExpression)(nil),  // 13: mapped.cloud.types.TimestampRangeFilterExpression
	(*Filter)(nil),                          // 14: mapped.cloud.types.Filter
	(*OpValue)(nil),                         // 15: mapped.cloud.types.OpValue
	nil,                                     // 16: mapped.cloud.types.Filter.FieldOpsEntry
	(*timestamppb.Timestamp)(nil),           // 17: google.protobuf.Timestamp
	(*TypedValue)(nil),                      // 18: mapped.cloud.types.TypedValue
	(*descriptorpb.FieldOptions)(nil),       // 19: google.protobuf.FieldOptions
	(*descriptorpb.MessageOptions)(nil),     // 20: google.protobuf.MessageOptions
}
var file_mapped_cloud_types_filter_proto_depIdxs = []int32{
	2,  // 0: mapped.cloud.types.StringMapStringFilterExpression.value:type_name -> mapped.cloud.types.StringFilterExpression
	3,  // 1: mapped.cloud.types.StringMapStringFilterExpression.and:type_name -> mapped.cloud.types.StringMapStringFilterExpression
	3,  // 2: mapped.cloud.types.StringMapStringFilterExpression.or:type_name -> mapped.cloud.types.StringMapStringFilterExpression
	3,  // 3: mapped.cloud.types.StringMapStringFilterExpression.not:type_name -> mapped.cloud.types.StringMapStringFilterExpression
	8,  // 4: mapped.cloud.types.StringMapInt64FilterExpression.value:type_name -> mapped.cloud.types.Int64FilterExpression
	4,  // 5: mapped.cloud.types.StringMapInt64FilterExpression.and:type_name -> mapped.cloud.types.StringMapInt64FilterExpression
	4,  // 6: mapped.cloud.types.StringMapInt64FilterExpression.or:type_name -> mapped.cloud.types.StringMapInt64FilterExpression
	4,  // 7: mapped.cloud.types.StringMapInt64FilterExpression.not:type_name -> mapped.cloud.types.StringMapInt64FilterExpression
	17, // 8: mapped.cloud.types.TimestampFilterExpression.eq:type_name -> google.protobuf.Timestamp
	17, // 9: mapped.cloud.types.TimestampFilterExpression.gt:type_name -> google.protobuf.Timestamp
	17, // 10: mapped.cloud.types.TimestampFilterExpression.gte:type_name -> google.protobuf.Timestamp
	17, // 11: mapped.cloud.types.TimestampFilterExpression.lt:type_name -> google.protobuf.Timestamp
	17, // 12: mapped.cloud.types.TimestampFilterExpression.lte:type_name -> google.protobuf.Timestamp
	17, // 13: mapped.cloud.types.TimestampRangeFilterExpression.gte:type_name -> google.protobuf.Timestamp
	17, // 14: mapped.cloud.types.TimestampRangeFilterExpression.lte:type_name -> google.protobuf.Timestamp
	16, // 15: mapped.cloud.types.Filter.field_ops:type_name -> mapped.cloud.types.Filter.FieldOpsEntry
	14, // 16: mapped.cloud.types.Filter.and:type_name -> mapped.cloud.types.Filter
	14, // 17: mapped.cloud.types.Filter.or:type_name -> mapped.cloud.types.Filter
	14, // 18: mapped.cloud.types.Filter.not:type_name -> mapped.cloud.types.Filter
	0,  // 19: mapped.cloud.types.OpValue.op:type_name -> mapped.cloud.types.Operator
	18, // 20: mapped.cloud.types.OpValue.value:type_name -> mapped.cloud.types.TypedValue
	15, // 21: mapped.cloud.types.Filter.FieldOpsEntry.value:type_name -> mapped.cloud.types.OpValue
	19, // 22: mapped.cloud.types.filter_path:extendee -> google.protobuf.FieldOptions
	19, // 23: mapped.cloud.types.op:extendee -> google.protobuf.FieldOptions
	20, // 24: mapped.cloud.types.nested_filter:extendee -> google.protobuf.MessageOptions
	20, // 25: mapped.cloud.types.filter_expression:extendee -> google.protobuf.MessageOptions
	20, // 26: mapped.cloud.types.allow_multi:extendee -> google.protobuf.MessageOptions
	20, // 27: mapped.cloud.types.filter_elem_match:extendee -> google.protobuf.MessageOptions
	0,  // 28: mapped.cloud.types.op:type_name -> mapped.cloud.types.Operator
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	28, // [28:29] is the sub-list for extension type_name
	22, // [22:28] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_mapped_cloud_types_filter_proto_init() }
func file_mapped_cloud_types_filter_proto_init() {
	if File_mapped_cloud_types_filter_proto != nil {
		return
	}
	file_mapped_cloud_types_typed_value_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mapped_cloud_types_filter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDFilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMapStringFilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringMapInt64FilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolFilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatFilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32FilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64FilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt32FilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UInt64FilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringArrayFilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampFilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampRangeFilterExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_filter_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mapped_cloud_types_filter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 6,
			NumServices:   0,
		},
		GoTypes:           file_mapped_cloud_types_filter_proto_goTypes,
		DependencyIndexes: file_mapped_cloud_types_filter_proto_depIdxs,
		EnumInfos:         file_mapped_cloud_types_filter_proto_enumTypes,
		MessageInfos:      file_mapped_cloud_types_filter_proto_msgTypes,
		ExtensionInfos:    file_mapped_cloud_types_filter_proto_extTypes,
	}.Build()
	File_mapped_cloud_types_filter_proto = out.File
	file_mapped_cloud_types_filter_proto_rawDesc = nil
	file_mapped_cloud_types_filter_proto_goTypes = nil
	file_mapped_cloud_types_filter_proto_depIdxs = nil
}
