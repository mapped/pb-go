// ******************************************************************************************************
// Copyright 2022 Mapped Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ******************************************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: mapped/cloud/types/typed_value.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContextLinkedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ContextLinkedData) Reset() {
	*x = ContextLinkedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextLinkedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextLinkedData) ProtoMessage() {}

func (x *ContextLinkedData) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextLinkedData.ProtoReflect.Descriptor instead.
func (*ContextLinkedData) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_typed_value_proto_rawDescGZIP(), []int{0}
}

func (x *ContextLinkedData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// AnyLinkedData is used to represent JSONLD
type AnyLinkedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *ContextLinkedData `protobuf:"bytes,1,opt,name=context,json=@context,proto3" json:"context,omitempty"`
	Value   *structpb.Struct   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AnyLinkedData) Reset() {
	*x = AnyLinkedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyLinkedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyLinkedData) ProtoMessage() {}

func (x *AnyLinkedData) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyLinkedData.ProtoReflect.Descriptor instead.
func (*AnyLinkedData) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_typed_value_proto_rawDescGZIP(), []int{1}
}

func (x *AnyLinkedData) GetContext() *ContextLinkedData {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *AnyLinkedData) GetValue() *structpb.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

type AnyLinkedDataMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]*AnyLinkedData `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AnyLinkedDataMap) Reset() {
	*x = AnyLinkedDataMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyLinkedDataMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyLinkedDataMap) ProtoMessage() {}

func (x *AnyLinkedDataMap) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyLinkedDataMap.ProtoReflect.Descriptor instead.
func (*AnyLinkedDataMap) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_typed_value_proto_rawDescGZIP(), []int{2}
}

func (x *AnyLinkedDataMap) GetMap() map[string]*AnyLinkedData {
	if x != nil {
		return x.Map
	}
	return nil
}

type TypedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*TypedValue_BoolValue
	//	*TypedValue_Uint32Value
	//	*TypedValue_Uint64Value
	//	*TypedValue_Int32Value
	//	*TypedValue_Int64Value
	//	*TypedValue_Float32Value
	//	*TypedValue_Float64Value
	//	*TypedValue_ByteArrayValue
	//	*TypedValue_StringValue
	//	*TypedValue_UuidValue
	//	*TypedValue_BoolArrayValue
	//	*TypedValue_EnumValue
	//	*TypedValue_DateValue
	//	*TypedValue_TimeValue
	//	*TypedValue_TimestampValue
	//	*TypedValue_GeojsonValue
	//	*TypedValue_GeopointValue
	//	*TypedValue_Json
	//	*TypedValue_MapValue
	//	*TypedValue_CalendarPeriodValue
	//	*TypedValue_DayOfWeekValue
	//	*TypedValue_IntervalValue
	//	*TypedValue_MoneyValue
	//	*TypedValue_MonthValue
	//	*TypedValue_PhoneNumberValue
	//	*TypedValue_PostalAddressValue
	Value isTypedValue_Value `protobuf_oneof:"value"`
}

func (x *TypedValue) Reset() {
	*x = TypedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedValue) ProtoMessage() {}

func (x *TypedValue) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedValue.ProtoReflect.Descriptor instead.
func (*TypedValue) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_typed_value_proto_rawDescGZIP(), []int{3}
}

func (m *TypedValue) GetValue() isTypedValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TypedValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*TypedValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *TypedValue) GetUint32Value() uint32 {
	if x, ok := x.GetValue().(*TypedValue_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *TypedValue) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*TypedValue_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *TypedValue) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*TypedValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *TypedValue) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*TypedValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *TypedValue) GetFloat32Value() float32 {
	if x, ok := x.GetValue().(*TypedValue_Float32Value); ok {
		return x.Float32Value
	}
	return 0
}

func (x *TypedValue) GetFloat64Value() float64 {
	if x, ok := x.GetValue().(*TypedValue_Float64Value); ok {
		return x.Float64Value
	}
	return 0
}

func (x *TypedValue) GetByteArrayValue() []byte {
	if x, ok := x.GetValue().(*TypedValue_ByteArrayValue); ok {
		return x.ByteArrayValue
	}
	return nil
}

func (x *TypedValue) GetStringValue() string {
	if x, ok := x.GetValue().(*TypedValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *TypedValue) GetUuidValue() []byte {
	if x, ok := x.GetValue().(*TypedValue_UuidValue); ok {
		return x.UuidValue
	}
	return nil
}

func (x *TypedValue) GetBoolArrayValue() *BoolArray {
	if x, ok := x.GetValue().(*TypedValue_BoolArrayValue); ok {
		return x.BoolArrayValue
	}
	return nil
}

func (x *TypedValue) GetEnumValue() uint32 {
	if x, ok := x.GetValue().(*TypedValue_EnumValue); ok {
		return x.EnumValue
	}
	return 0
}

func (x *TypedValue) GetDateValue() *Date {
	if x, ok := x.GetValue().(*TypedValue_DateValue); ok {
		return x.DateValue
	}
	return nil
}

func (x *TypedValue) GetTimeValue() *TimeOfDay {
	if x, ok := x.GetValue().(*TypedValue_TimeValue); ok {
		return x.TimeValue
	}
	return nil
}

func (x *TypedValue) GetTimestampValue() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*TypedValue_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

func (x *TypedValue) GetGeojsonValue() *structpb.Struct {
	if x, ok := x.GetValue().(*TypedValue_GeojsonValue); ok {
		return x.GeojsonValue
	}
	return nil
}

func (x *TypedValue) GetGeopointValue() *GeoPoint {
	if x, ok := x.GetValue().(*TypedValue_GeopointValue); ok {
		return x.GeopointValue
	}
	return nil
}

func (x *TypedValue) GetJson() *AnyLinkedData {
	if x, ok := x.GetValue().(*TypedValue_Json); ok {
		return x.Json
	}
	return nil
}

func (x *TypedValue) GetMapValue() *GenericTypedMap {
	if x, ok := x.GetValue().(*TypedValue_MapValue); ok {
		return x.MapValue
	}
	return nil
}

func (x *TypedValue) GetCalendarPeriodValue() CalendarPeriod {
	if x, ok := x.GetValue().(*TypedValue_CalendarPeriodValue); ok {
		return x.CalendarPeriodValue
	}
	return CalendarPeriod_CALENDAR_PERIOD_UNSPECIFIED
}

func (x *TypedValue) GetDayOfWeekValue() DayOfWeek {
	if x, ok := x.GetValue().(*TypedValue_DayOfWeekValue); ok {
		return x.DayOfWeekValue
	}
	return DayOfWeek_DAY_OF_WEEK_UNSPECIFIED
}

func (x *TypedValue) GetIntervalValue() *Interval {
	if x, ok := x.GetValue().(*TypedValue_IntervalValue); ok {
		return x.IntervalValue
	}
	return nil
}

func (x *TypedValue) GetMoneyValue() *Money {
	if x, ok := x.GetValue().(*TypedValue_MoneyValue); ok {
		return x.MoneyValue
	}
	return nil
}

func (x *TypedValue) GetMonthValue() Month {
	if x, ok := x.GetValue().(*TypedValue_MonthValue); ok {
		return x.MonthValue
	}
	return Month_MONTH_UNSPECIFIED
}

func (x *TypedValue) GetPhoneNumberValue() *PhoneNumber {
	if x, ok := x.GetValue().(*TypedValue_PhoneNumberValue); ok {
		return x.PhoneNumberValue
	}
	return nil
}

func (x *TypedValue) GetPostalAddressValue() *PostalAddress {
	if x, ok := x.GetValue().(*TypedValue_PostalAddressValue); ok {
		return x.PostalAddressValue
	}
	return nil
}

type isTypedValue_Value interface {
	isTypedValue_Value()
}

type TypedValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,10,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type TypedValue_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,11,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type TypedValue_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,12,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type TypedValue_Int32Value struct {
	Int32Value int32 `protobuf:"varint,13,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type TypedValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,14,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type TypedValue_Float32Value struct {
	Float32Value float32 `protobuf:"fixed32,15,opt,name=float32_value,json=float32Value,proto3,oneof"`
}

type TypedValue_Float64Value struct {
	Float64Value float64 `protobuf:"fixed64,16,opt,name=float64_value,json=float64Value,proto3,oneof"`
}

type TypedValue_ByteArrayValue struct {
	ByteArrayValue []byte `protobuf:"bytes,17,opt,name=byte_array_value,json=byteArrayValue,proto3,oneof"`
}

type TypedValue_StringValue struct {
	StringValue string `protobuf:"bytes,18,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type TypedValue_UuidValue struct {
	UuidValue []byte `protobuf:"bytes,19,opt,name=uuid_value,json=uuidValue,proto3,oneof"` // must be exactly 16 bytes
}

type TypedValue_BoolArrayValue struct {
	BoolArrayValue *BoolArray `protobuf:"bytes,20,opt,name=bool_array_value,json=boolArrayValue,proto3,oneof"`
}

type TypedValue_EnumValue struct {
	EnumValue uint32 `protobuf:"varint,21,opt,name=enum_value,json=enumValue,proto3,oneof"`
}

type TypedValue_DateValue struct {
	DateValue *Date `protobuf:"bytes,22,opt,name=date_value,json=dateValue,proto3,oneof"`
}

type TypedValue_TimeValue struct {
	TimeValue *TimeOfDay `protobuf:"bytes,23,opt,name=time_value,json=timeValue,proto3,oneof"`
}

type TypedValue_TimestampValue struct {
	TimestampValue *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=timestamp_value,json=timestampValue,proto3,oneof"`
}

type TypedValue_GeojsonValue struct {
	GeojsonValue *structpb.Struct `protobuf:"bytes,25,opt,name=geojson_value,json=geojsonValue,proto3,oneof"`
}

type TypedValue_GeopointValue struct {
	GeopointValue *GeoPoint `protobuf:"bytes,28,opt,name=geopoint_value,json=geopointValue,proto3,oneof"`
}

type TypedValue_Json struct {
	Json *AnyLinkedData `protobuf:"bytes,29,opt,name=json,proto3,oneof"`
}

type TypedValue_MapValue struct {
	MapValue *GenericTypedMap `protobuf:"bytes,30,opt,name=map_value,json=mapValue,proto3,oneof"`
}

type TypedValue_CalendarPeriodValue struct {
	// Proposed types
	CalendarPeriodValue CalendarPeriod `protobuf:"varint,100,opt,name=calendar_period_value,json=calendarPeriodValue,proto3,enum=mapped.cloud.types.CalendarPeriod,oneof"`
}

type TypedValue_DayOfWeekValue struct {
	DayOfWeekValue DayOfWeek `protobuf:"varint,101,opt,name=day_of_week_value,json=dayOfWeekValue,proto3,enum=mapped.cloud.types.DayOfWeek,oneof"`
}

type TypedValue_IntervalValue struct {
	IntervalValue *Interval `protobuf:"bytes,102,opt,name=interval_value,json=intervalValue,proto3,oneof"`
}

type TypedValue_MoneyValue struct {
	MoneyValue *Money `protobuf:"bytes,103,opt,name=money_value,json=moneyValue,proto3,oneof"`
}

type TypedValue_MonthValue struct {
	MonthValue Month `protobuf:"varint,104,opt,name=month_value,json=monthValue,proto3,enum=mapped.cloud.types.Month,oneof"`
}

type TypedValue_PhoneNumberValue struct {
	PhoneNumberValue *PhoneNumber `protobuf:"bytes,105,opt,name=phone_number_value,json=phoneNumberValue,proto3,oneof"`
}

type TypedValue_PostalAddressValue struct {
	PostalAddressValue *PostalAddress `protobuf:"bytes,106,opt,name=postal_address_value,json=postalAddressValue,proto3,oneof"`
}

func (*TypedValue_BoolValue) isTypedValue_Value() {}

func (*TypedValue_Uint32Value) isTypedValue_Value() {}

func (*TypedValue_Uint64Value) isTypedValue_Value() {}

func (*TypedValue_Int32Value) isTypedValue_Value() {}

func (*TypedValue_Int64Value) isTypedValue_Value() {}

func (*TypedValue_Float32Value) isTypedValue_Value() {}

func (*TypedValue_Float64Value) isTypedValue_Value() {}

func (*TypedValue_ByteArrayValue) isTypedValue_Value() {}

func (*TypedValue_StringValue) isTypedValue_Value() {}

func (*TypedValue_UuidValue) isTypedValue_Value() {}

func (*TypedValue_BoolArrayValue) isTypedValue_Value() {}

func (*TypedValue_EnumValue) isTypedValue_Value() {}

func (*TypedValue_DateValue) isTypedValue_Value() {}

func (*TypedValue_TimeValue) isTypedValue_Value() {}

func (*TypedValue_TimestampValue) isTypedValue_Value() {}

func (*TypedValue_GeojsonValue) isTypedValue_Value() {}

func (*TypedValue_GeopointValue) isTypedValue_Value() {}

func (*TypedValue_Json) isTypedValue_Value() {}

func (*TypedValue_MapValue) isTypedValue_Value() {}

func (*TypedValue_CalendarPeriodValue) isTypedValue_Value() {}

func (*TypedValue_DayOfWeekValue) isTypedValue_Value() {}

func (*TypedValue_IntervalValue) isTypedValue_Value() {}

func (*TypedValue_MoneyValue) isTypedValue_Value() {}

func (*TypedValue_MonthValue) isTypedValue_Value() {}

func (*TypedValue_PhoneNumberValue) isTypedValue_Value() {}

func (*TypedValue_PostalAddressValue) isTypedValue_Value() {}

type TypedValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]*TypedValue `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TypedValueMap) Reset() {
	*x = TypedValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedValueMap) ProtoMessage() {}

func (x *TypedValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedValueMap.ProtoReflect.Descriptor instead.
func (*TypedValueMap) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_typed_value_proto_rawDescGZIP(), []int{4}
}

func (x *TypedValueMap) GetMap() map[string]*TypedValue {
	if x != nil {
		return x.Map
	}
	return nil
}

type GenericTypedMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*GenericTypedMap_Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *GenericTypedMap) Reset() {
	*x = GenericTypedMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericTypedMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericTypedMap) ProtoMessage() {}

func (x *GenericTypedMap) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericTypedMap.ProtoReflect.Descriptor instead.
func (*GenericTypedMap) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_typed_value_proto_rawDescGZIP(), []int{5}
}

func (x *GenericTypedMap) GetEntries() []*GenericTypedMap_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type BoolArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []bool `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *BoolArray) Reset() {
	*x = BoolArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolArray) ProtoMessage() {}

func (x *BoolArray) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolArray.ProtoReflect.Descriptor instead.
func (*BoolArray) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_typed_value_proto_rawDescGZIP(), []int{6}
}

func (x *BoolArray) GetValues() []bool {
	if x != nil {
		return x.Values
	}
	return nil
}

type GenericTypedMap_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *TypedValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *TypedValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GenericTypedMap_Entry) Reset() {
	*x = GenericTypedMap_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericTypedMap_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericTypedMap_Entry) ProtoMessage() {}

func (x *GenericTypedMap_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_mapped_cloud_types_typed_value_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericTypedMap_Entry.ProtoReflect.Descriptor instead.
func (*GenericTypedMap_Entry) Descriptor() ([]byte, []int) {
	return file_mapped_cloud_types_typed_value_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GenericTypedMap_Entry) GetKey() *TypedValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GenericTypedMap_Entry) GetValue() *TypedValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_mapped_cloud_types_typed_value_proto protoreflect.FileDescriptor

var file_mapped_cloud_types_typed_value_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x79, 0x6f, 0x66, 0x77, 0x65, 0x65, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x66, 0x64, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x67, 0x65, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x27, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x41, 0x6e, 0x79,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x40, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x10,
	0x41, 0x6e, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70,
	0x12, 0x3f, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x6e, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61,
	0x70, 0x1a, 0x59, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x0b, 0x0a,
	0x0a, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75,
	0x75, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x09, 0x75, 0x75, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x10,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x65,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x65,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x67, 0x65,
	0x6f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x37, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x6e, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x6d, 0x61,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58,
	0x0a, 0x15, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x48, 0x00, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x61, 0x79, 0x5f,
	0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x54, 0x79, 0x70,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x03, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x56, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x6f, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x09, 0x42, 0x6f,
	0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42,
	0x53, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x50, 0x01, 0x5a, 0x22, 0x67, 0x6f, 0x2e,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0xaa,
	0x02, 0x12, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mapped_cloud_types_typed_value_proto_rawDescOnce sync.Once
	file_mapped_cloud_types_typed_value_proto_rawDescData = file_mapped_cloud_types_typed_value_proto_rawDesc
)

func file_mapped_cloud_types_typed_value_proto_rawDescGZIP() []byte {
	file_mapped_cloud_types_typed_value_proto_rawDescOnce.Do(func() {
		file_mapped_cloud_types_typed_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_mapped_cloud_types_typed_value_proto_rawDescData)
	})
	return file_mapped_cloud_types_typed_value_proto_rawDescData
}

var file_mapped_cloud_types_typed_value_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mapped_cloud_types_typed_value_proto_goTypes = []interface{}{
	(*ContextLinkedData)(nil),     // 0: mapped.cloud.types.ContextLinkedData
	(*AnyLinkedData)(nil),         // 1: mapped.cloud.types.AnyLinkedData
	(*AnyLinkedDataMap)(nil),      // 2: mapped.cloud.types.AnyLinkedDataMap
	(*TypedValue)(nil),            // 3: mapped.cloud.types.TypedValue
	(*TypedValueMap)(nil),         // 4: mapped.cloud.types.TypedValueMap
	(*GenericTypedMap)(nil),       // 5: mapped.cloud.types.GenericTypedMap
	(*BoolArray)(nil),             // 6: mapped.cloud.types.BoolArray
	nil,                           // 7: mapped.cloud.types.AnyLinkedDataMap.MapEntry
	nil,                           // 8: mapped.cloud.types.TypedValueMap.MapEntry
	(*GenericTypedMap_Entry)(nil), // 9: mapped.cloud.types.GenericTypedMap.Entry
	(*structpb.Struct)(nil),       // 10: google.protobuf.Struct
	(*Date)(nil),                  // 11: mapped.cloud.types.Date
	(*TimeOfDay)(nil),             // 12: mapped.cloud.types.TimeOfDay
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*GeoPoint)(nil),              // 14: mapped.cloud.types.GeoPoint
	(CalendarPeriod)(0),           // 15: mapped.cloud.types.CalendarPeriod
	(DayOfWeek)(0),                // 16: mapped.cloud.types.DayOfWeek
	(*Interval)(nil),              // 17: mapped.cloud.types.Interval
	(*Money)(nil),                 // 18: mapped.cloud.types.Money
	(Month)(0),                    // 19: mapped.cloud.types.Month
	(*PhoneNumber)(nil),           // 20: mapped.cloud.types.PhoneNumber
	(*PostalAddress)(nil),         // 21: mapped.cloud.types.PostalAddress
}
var file_mapped_cloud_types_typed_value_proto_depIdxs = []int32{
	0,  // 0: mapped.cloud.types.AnyLinkedData.context:type_name -> mapped.cloud.types.ContextLinkedData
	10, // 1: mapped.cloud.types.AnyLinkedData.value:type_name -> google.protobuf.Struct
	7,  // 2: mapped.cloud.types.AnyLinkedDataMap.map:type_name -> mapped.cloud.types.AnyLinkedDataMap.MapEntry
	6,  // 3: mapped.cloud.types.TypedValue.bool_array_value:type_name -> mapped.cloud.types.BoolArray
	11, // 4: mapped.cloud.types.TypedValue.date_value:type_name -> mapped.cloud.types.Date
	12, // 5: mapped.cloud.types.TypedValue.time_value:type_name -> mapped.cloud.types.TimeOfDay
	13, // 6: mapped.cloud.types.TypedValue.timestamp_value:type_name -> google.protobuf.Timestamp
	10, // 7: mapped.cloud.types.TypedValue.geojson_value:type_name -> google.protobuf.Struct
	14, // 8: mapped.cloud.types.TypedValue.geopoint_value:type_name -> mapped.cloud.types.GeoPoint
	1,  // 9: mapped.cloud.types.TypedValue.json:type_name -> mapped.cloud.types.AnyLinkedData
	5,  // 10: mapped.cloud.types.TypedValue.map_value:type_name -> mapped.cloud.types.GenericTypedMap
	15, // 11: mapped.cloud.types.TypedValue.calendar_period_value:type_name -> mapped.cloud.types.CalendarPeriod
	16, // 12: mapped.cloud.types.TypedValue.day_of_week_value:type_name -> mapped.cloud.types.DayOfWeek
	17, // 13: mapped.cloud.types.TypedValue.interval_value:type_name -> mapped.cloud.types.Interval
	18, // 14: mapped.cloud.types.TypedValue.money_value:type_name -> mapped.cloud.types.Money
	19, // 15: mapped.cloud.types.TypedValue.month_value:type_name -> mapped.cloud.types.Month
	20, // 16: mapped.cloud.types.TypedValue.phone_number_value:type_name -> mapped.cloud.types.PhoneNumber
	21, // 17: mapped.cloud.types.TypedValue.postal_address_value:type_name -> mapped.cloud.types.PostalAddress
	8,  // 18: mapped.cloud.types.TypedValueMap.map:type_name -> mapped.cloud.types.TypedValueMap.MapEntry
	9,  // 19: mapped.cloud.types.GenericTypedMap.entries:type_name -> mapped.cloud.types.GenericTypedMap.Entry
	1,  // 20: mapped.cloud.types.AnyLinkedDataMap.MapEntry.value:type_name -> mapped.cloud.types.AnyLinkedData
	3,  // 21: mapped.cloud.types.TypedValueMap.MapEntry.value:type_name -> mapped.cloud.types.TypedValue
	3,  // 22: mapped.cloud.types.GenericTypedMap.Entry.key:type_name -> mapped.cloud.types.TypedValue
	3,  // 23: mapped.cloud.types.GenericTypedMap.Entry.value:type_name -> mapped.cloud.types.TypedValue
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_mapped_cloud_types_typed_value_proto_init() }
func file_mapped_cloud_types_typed_value_proto_init() {
	if File_mapped_cloud_types_typed_value_proto != nil {
		return
	}
	file_mapped_cloud_types_calendar_period_proto_init()
	file_mapped_cloud_types_date_proto_init()
	file_mapped_cloud_types_dayofweek_proto_init()
	file_mapped_cloud_types_interval_proto_init()
	file_mapped_cloud_types_money_proto_init()
	file_mapped_cloud_types_month_proto_init()
	file_mapped_cloud_types_phone_number_proto_init()
	file_mapped_cloud_types_postal_address_proto_init()
	file_mapped_cloud_types_timeofday_proto_init()
	file_mapped_cloud_types_geojson_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mapped_cloud_types_typed_value_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextLinkedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_typed_value_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyLinkedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_typed_value_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyLinkedDataMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_typed_value_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_typed_value_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_typed_value_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericTypedMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_typed_value_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapped_cloud_types_typed_value_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericTypedMap_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mapped_cloud_types_typed_value_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TypedValue_BoolValue)(nil),
		(*TypedValue_Uint32Value)(nil),
		(*TypedValue_Uint64Value)(nil),
		(*TypedValue_Int32Value)(nil),
		(*TypedValue_Int64Value)(nil),
		(*TypedValue_Float32Value)(nil),
		(*TypedValue_Float64Value)(nil),
		(*TypedValue_ByteArrayValue)(nil),
		(*TypedValue_StringValue)(nil),
		(*TypedValue_UuidValue)(nil),
		(*TypedValue_BoolArrayValue)(nil),
		(*TypedValue_EnumValue)(nil),
		(*TypedValue_DateValue)(nil),
		(*TypedValue_TimeValue)(nil),
		(*TypedValue_TimestampValue)(nil),
		(*TypedValue_GeojsonValue)(nil),
		(*TypedValue_GeopointValue)(nil),
		(*TypedValue_Json)(nil),
		(*TypedValue_MapValue)(nil),
		(*TypedValue_CalendarPeriodValue)(nil),
		(*TypedValue_DayOfWeekValue)(nil),
		(*TypedValue_IntervalValue)(nil),
		(*TypedValue_MoneyValue)(nil),
		(*TypedValue_MonthValue)(nil),
		(*TypedValue_PhoneNumberValue)(nil),
		(*TypedValue_PostalAddressValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mapped_cloud_types_typed_value_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mapped_cloud_types_typed_value_proto_goTypes,
		DependencyIndexes: file_mapped_cloud_types_typed_value_proto_depIdxs,
		MessageInfos:      file_mapped_cloud_types_typed_value_proto_msgTypes,
	}.Build()
	File_mapped_cloud_types_typed_value_proto = out.File
	file_mapped_cloud_types_typed_value_proto_rawDesc = nil
	file_mapped_cloud_types_typed_value_proto_goTypes = nil
	file_mapped_cloud_types_typed_value_proto_depIdxs = nil
}
